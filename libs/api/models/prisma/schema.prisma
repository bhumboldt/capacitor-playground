// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Nonprofit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
}

model TestActivity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  distance  Float
  duration  Float
  image     String
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  accessCode String?
  createdAt  DateTime    @default(now())
  badges     UserBadge[]
  Habit      Habit[]
}

model ActivityType {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  name       String
  imageUrl   String
  value      String
  isFeatured Boolean  @default(false)
}

model Badge {
  id                         String      @id @default(uuid())
  badge_name                 String
  badge_description          String
  badge_image_unlocked_url   String
  badge_image_locked_url     String
  badge_congrats_description String
  critera                    Json
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @default(now())
  users                      UserBadge[]
}

model HabitCompletedDates {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  habitId   String
  date      DateTime @default(now())
  Habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
}

model Habit {
  id          String                @id @default(uuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now())
  userId      String
  name        String
  description String?
  User        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  HabitDates  HabitCompletedDates[]
}

model UserBadge {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  badgeId   String
  unlocked  Boolean
  Badge     Badge?   @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
